@page "/View-Item/{ItemId:int}"
@using MusicApi.Data;
@using MusicApi.Request;
@using MusicApi.FrontFacingData;
@using MusicBlazorApp.State;
@using MusicApi.Dtos;
@inject UserManager<IdentityUser> userManager;
@inject IConfiguration config;
@inject HttpClient httpClient;
@inject AuthenticationStateProvider auth;
@inject IHostEnvironment Environment;
@inject NavigationManager nav;
@inject CartState cartState;
@inject UrlState urlState;


@if (Item is not null)
{
    @if (ShowReviewPopup)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit User</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                        @onclick="TogglePopUp">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current user -->
                    <div class="modal-body">


                        <p>Rating out of 5</p>
                        <input type="number" min="1" max="5" @bind-value="ReviewRating" />
                        <p>Review Text</p>
                        <input type="text" @bind-value="ReviewTxt" />
                        <br /><br />
                        <!-- Button to submit the review -->
                        <button class="btn btn-primary"
                        @onclick="SubmitReview">
                            Submit
                        </button>

                        <br />
                        @if (strError.Length > 0)
                        {
                            <span style="color:red">@strError</span>
                        }
                    </div>
                </div>
            </div>
        </div>

    }
    @if (ShowAddedToCartPopup)
    {
        <div style="background-color: white; position: fixed; z-index: 1; bottom: 20px; right: 20px; padding: 30px; border-radius: 10px; box-shadow: -5px 5px 5px 10px lightgray;">
            <h3>Successfully Added</h3>
            <div class="red-button"><h5><a href="/cart">View Your Cart</a></h5></div>
        </div>

    }
    <div class="row main-container">
        <div class="col-md-6">
            <div class="d-flex flex-column">
                @foreach (var img in ImgFilePaths)
                {
                    <img src="@img" class="img-fluid img" />
                }
            </div>
            <div id="carouselExampleControls" class="carousel slide d-none" data-ride="carousel">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img class="d-block w-100" src="@ImgFilePaths.FirstOrDefault()" alt="@Item.ItemName" />
                    </div>

                    <div class="carousel-item">
                        <img class="d-block w-100" src="@ImgFilePaths.LastOrDefault()" alt="@Item.ItemName" />
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev" style="background-color: black;">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next" style="background-color: black;">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
        <div class="col-md-6">
            <h1>@Item.ItemName</h1>
            <p><strong>$@Item.SellPrice</strong></p>
            <div class="ratings my-5">
                @if (Item.AverageItemRating != 0)
                {
                    @for (int i = 1; i <= 5; i++)
                    {
                        @if (Item.AverageItemRating >= i)
                        {
                            <i class="fa fa-star rating-color"></i>
                        }
                        else
                        {
                            <i class="fa fa-star"></i>
                        }
                    }
                    <span class="mx-3">@Item.AverageItemRating rating out of 5</span>
                }
                else
                {
                    <p>No reviews yet</p>
                }
                @if (CurrentUserId == 0) // not logged in
                {
                    <a href="/Identity/Account/Login"><br />Login to leave a review!</a>
                }
                else
                {
                    @if (CurrentUserName is null) // they are logged in but have no name yet
                    {
                        <br />

                        <a href="/Account">Finish Setting Up Your Account To Leave A Review</a>
                    }
                    else // they are logged in with correct account settings
                    {
                        <br />

                        <a style="color: blue; text-decoration: underline;" @onclick="TogglePopUp">Leave a Review</a>

                    }
                }
            </div>
            <h5><strong>Description</strong></h5>
            <p>@Item.Description</p>
            <div  style="padding-top: 50px;">
                <h5>Purchase Information</h5>
                <hr>
                <p>Purchase new or used and pick up in store. </p>
                <div>
                    @foreach (var status in Item.ItemStatuses)
                    {
                        <button class="button button4 @(statusClicked == status.Name ? "selected" : "")" @onclick="() => ChangeStatusChoice(status)">@status.Name</button>
                    }
                    <br />
                </div>

                <div class="d-flex flex-row justify-content-between" style="padding-top:25px;">
                    <select class="dropdown" style="border-style: solid; height:50px;">
                        @foreach (int i in Enumerable.Range(1, selectedStatus.Quantity))
                        {
                            <option @onclick="() => ChangeQuantity(i)">@i</option>
                        }

                    </select>
                    <div class="col-md-6" style="padding-top: 5px; padding-bottom: 50px;">
                        @if (CurrentUserName is null)
                        {
                            @if (CurrentUserId == 0)
                            {
                                <center><div class="red-button"><h5 @onclick="() => urlState.Url = CurrentUrl"><a href="/Identity/Account/Login">Purchase</a></h5></div></center>
                            }
                            else
                            {
                                <center><div class="red-button"><h5 @onclick="() => urlState.Url = CurrentUrl"><a href="/Account">Purchase</a></h5></div></center>
                            }
                        }
                        else
                        {
                            <div class="red-button"><h5 @onclick="() => AddItemToCart(Item)">Add to Cart</h5></div>
                        }
                    </div>
                </div>
                @if (AddToCartError.Length > 0)
                {
                    <div class="alert alert-danger">@AddToCartError</div>
                }
            </div>

            <h5>Rental Information</h5>
            <hr />
            <div class="row">
                <div class="col-md-6"><p>Rent this item. Pick up and drop off in store.</p></div>
                <div class="col-md-6">
                    @if (CurrentUserName is null)
                    {
                        @if (CurrentUserId == 0)
                        {
                            <div class="red-button"><h5><a href="/Identity/Account/Login">Rent</a></h5></div>
                        }
                        else
                        {
                            <div class="red-button"><h5><a href="/Account">Rent</a></h5></div>
                        }
                    }
                    else
                    {
                        <div class="red-button"><h5><a @onclick="() => HandleRentClick(Item.Id)">Rent</a></h5></div>
                    }
                </div>
            </div>
        </div>

        <div>
            <h3>Reviews</h3>
            <hr />
            @if (Reviews.Any())
            {
                @foreach (var rev in Reviews)
                {
                    <div class="row review-tile p-4 m-3">
                        <h5>@rev.Author</h5>
                        <small>@rev.Date</small>
                        <div class="ratings">
                            @for (int i = 1; i <= 5; i++)
                            {
                                @if (rev.Rating >= i)
                                {
                                    <i class="fa fa-star rating-color"></i>
                                }
                                else
                                {
                                    <i class="fa fa-star"></i>

                                }
                            }
                            <span class="px-3">@rev.Rating rating out of 5</span>
                        </div>
                        <p class="m-3">@rev.Text</p>
                    </div>
                }
            }
            else
            {
                <p>No Reviews for this item yet</p>
            }
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}


@code {
    [Parameter]
    public int ItemId { get; set; }

    public StatusDto selectedStatus { get; set; }

    public string? CurrentUrl { get; set; }

    public ItemDto Item { get; set; }

    public List<string> ImgFilePaths { get; set; } = new();

    public bool IsFirstImg = true;

    // Review Stuff
    public IEnumerable<ReviewDto>? Reviews { get; set; }

    public decimal? ItemAverageRating { get; set; }

    bool ShowReviewPopup { get; set; }

    public string ReviewTxt { get; set; }

    public int ReviewRating { get; set; }

    public int quantity = 1;

    public bool ValidRevRating { get; set; }

    public ReviewDto NewReview { get; set; }

    // User 
    public IdentityUser objUser = new();

    public int CurrentUserId { get; set; }

    public string CurrentUserName { get; set; }

    public string borderStyle { get; set; }

    // Popups
    public bool ShowAddedToCartPopup { get; set; }

    // Errors
    public string AddToCartError = "";

    public string strError = "";


    private string statusClicked { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUrl = nav.Uri;

        Item = await httpClient.GetFromJsonAsync<ItemDto>($"{config[Constants.ApiEndpoint]}/Items/{ItemId}");

        if (Item is not null)
        {
            Reviews = Item.Reviews;
            foreach (var img in Item.ImageFilePaths)
            {
                ImgFilePaths.Add(Path.Combine("css", "images", "itemImages", $"{img}"));
            }
        }

        var authstate = await auth.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        var allCustomers = await httpClient.GetFromJsonAsync<IEnumerable<Customer>>($"{config[Constants.ApiEndpoint]}/customer");

        foreach (var cust in allCustomers)
        {
            if (cust.Email == name)
            {
                CurrentUserId = cust.Id;
                CurrentUserName = cust.FirstName;
            }
        }

        if (Item is not null)
        {
            selectedStatus = Item.ItemStatuses.First();
        }
    }

    public static string UpdateIsFirstImg(bool IsFirstImg)
    {
        IsFirstImg = false;
        return "";
    }

    public void TogglePopUp()
    {
        ShowReviewPopup = !ShowReviewPopup;
    }

    public async Task SubmitReview()
    {
        strError = "";
        if (ReviewRating > 5 || ReviewRating < 1)
        {
            //ShowReviewPopup = false;
            strError = "Please enter a valid rating (1 through 5)";
            await Task.CompletedTask;
            return;
        }
        var request = new AddReviewRequest(Item.Id, CurrentUserId, DateOnly.FromDateTime(DateTime.Now), ReviewTxt, ReviewRating);
        var response = await httpClient.PostAsJsonAsync($"{config[Constants.ApiEndpoint]}/review/{request}/", request);

        TogglePopUp();  // close popup
        nav.NavigateTo(nav.Uri, forceLoad: true);
    }

    public async Task AddItemToCart(ItemDto itemDto)
    {
        AddToCartError = "";

        var authstate = await auth.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        if (name.Length > 0)
        {
            // TODO: DUSTY - When they select too many items and those items are in other peoples carts, say no!
            @* if (quantity <= itemDto.Quantity)
            { *@
                AddItemToCartRequest request = new AddItemToCartRequest()
                    {
                        userEmail = name,
                        ItemId = itemDto.Id,
                        StatusName = selectedStatus.Name,
                        Quantity = quantity
                    };

                var response = await httpClient.PostAsJsonAsync($"{config[Constants.ApiEndpoint]}/cart/{request}/", request);

                if (response.IsSuccessStatusCode)
                {
                    ShowAddedToCartPopup = true;
                }
                else
                {
                    AddToCartError = "There was a problem adding this item to you cart.";
                }
            @* }
            else
            {
                AddToCartError = "Error when adding to cart. Not enough stock for your selection.";
            } *@
        }
        else
        {
            AddToCartError = "Error when adding to cart. You are not logged in";
        }
    }

    public void HandleRentClick(int ItemId)
    {
        nav.NavigateTo($"/Rent-Item/{ItemId}");
    }

    public void ChangeStatusChoice(StatusDto sdto)
    {
        selectedStatus = sdto;
        statusClicked = sdto.Name;
    }

    public void ChangeQuantity(int inty)
    {
        quantity = inty;
    }
}