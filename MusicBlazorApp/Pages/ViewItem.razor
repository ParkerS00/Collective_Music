@page "/View-Item/{ItemId:int}"
@using MusicApi.Data;
@using MusicBlazorApp.Data;
@inject IConfiguration config;
@inject HttpClient httpClient;
@inject IHostEnvironment Environment

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');
</style>


<button @onclick="TogglePopUp">Show Pop Up</button>

@if (PopupVisible)
{
    <div class="overlay" style="position: absolute; height: 100vh; width: 100vw; background-color: black;">
        <div style="position: absolute; height: 400px; width: 400px; background-color: blue;">
            <h1>This is a popup</h1>
        </div>

    </div>
}


@if (Item is not null)
{
    <div class="row main-container">
        <div class="col-md-6">
            <div class="d-flex flex-column">
                @foreach (var img in ImgFilePaths)
                {
                    <img src="@img" class="img-fluid img" />
                }
            </div>
            <div id="carouselExampleControls" class="carousel slide d-none" data-ride="carousel">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img class="d-block w-100" src="@ImgFilePaths.FirstOrDefault()" alt="@Item.ItemName" />
                    </div>

                    <div class="carousel-item">
                        <img class="d-block w-100" src="@ImgFilePaths.LastOrDefault()" alt="@Item.ItemName" />
                    </div>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev" style="background-color: black;">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next" style="background-color: black;">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
        <div class="col-md-6">
            <h1>@Item.ItemName</h1>
            <p><strong>$@Item.SellPrice</strong></p>
            <div class="ratings my-5">
                @for (int i = 1; i <= 5; i++)
                {
                    @if (ItemAverageRating >= i)
                    {
                        <i class="fa fa-star rating-color"></i>
                    }
                    else
                    {
                        <i class="fa fa-star"></i>
                    }
                }
                @if (ItemAverageRating != 0)
                {
                    <span class="mx-3">@ItemAverageRating rating out of 5<br /><a href="#">Leave a Review</a></span>
                }
                else
                {
                    <span class="mx-3">There are no reviews yet</span>
                }
            </div>
            <h5><strong>Description</strong></h5>
            <p>@Item.Description</p>
            <h5>Purchase Information</h5>
            <hr>
            <div class="row">
                <div class="col-md-6"><p>Purchase new or used and pick up in store. </p></div>
                <div class="col-md-6">
                    <div class="red-button"><h5><a href="#">Purchase</a></h5></div>
                </div>
            </div>

            <h5>Rental Information</h5>
            <hr />
            <div class="row">
                <div class="col-md-6"><p>Rent this item. Pick up and drop off in store.</p></div>
                <div class="col-md-6">
                    <div class="red-button"><h5><a href="#">Rent</a></h5></div>
                </div>
            </div>
        </div>

        <div>
            <h3>Reviews</h3>
            <hr />
            @if (Reviews is not null)
            {
                @foreach (var rev in Reviews)
                {
                    <div class="row review-tile p-4 m-3">
                        <h5>@rev.Author</h5>
                        <div class="ratings">
                            @for (int i = 1; i <= 5; i++)
                            {
                                @if(rev.Rating >= i)
                                {
                                    <i class="fa fa-star rating-color"></i>

                                }
                                else
                                {
                                    <i class="fa fa-star"></i>

                                }
                            }
                            
                          
                            <span class="px-3">@rev.Rating rating out of 5</span>
                        </div>
                        <p class="m-3">@rev.Text</p>
                    </div>
                }
            }
            else
            {
                <p>No Reviews for this item yet</p>
                <a href="#">Leave a Review</a>
            }
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}


@code {
    [Parameter]
    public int ItemId { get; set; }

    public IEnumerable<ReviewDto>? Reviews { get; set; }

    public ItemDto Item { get; set; }

    public List<string> ImgFilePaths { get; set; } = new();

    public bool IsFirstImg = true;

    public decimal? ItemAverageRating { get; set; }

    bool PopupVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Item = await httpClient.GetFromJsonAsync<ItemDto>($"{config[Constants.ApiEndpoint]}/Items/{ItemId}");

        if (Item is not null)
        {
            Reviews = Item.Reviews;
            foreach (var img in Item.ImageFilePaths)
            {
                ImgFilePaths.Add(Path.Combine("css", "images", "itemImages", $"{img}"));
            }
        }

        GetAverageRating();
    }

    public static string UpdateIsFirstImg(bool IsFirstImg)
    {
        IsFirstImg = false;
        return "";
    }

    public void GetAverageRating()
    {
        if (Item.Reviews.Count() > 0)
        {
            decimal sum = 0;
            foreach(var rating in Item.Reviews)
            {
                sum += (decimal)rating.Rating;   
            }

            ItemAverageRating = Math.Round((sum / (decimal)Item.Reviews.Count()), 1);
        }
        else
        {
            ItemAverageRating = 0;
        }
    }

    public void TogglePopUp()
    {
        PopupVisible = !PopupVisible;
    }
}
