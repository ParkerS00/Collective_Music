@page "/rent-a-room"
@using MusicApi.Data;
@using MusicApi.Dtos;
@using MusicApi.Request;
@inject IConfiguration config;
@inject HttpClient httpClient;
@inject AuthenticationStateProvider auth;
@inject NavigationManager NavManager;



<div class="container col-lg-6">
    <div class="image-stack">
        <div class="image-stack__item image-stack__item--top">
            <img src="css/images/Recording-Studio4.png" alt="" style="max-width:600px;">
        </div>
        <div class="image-stack__item image-stack__item--bottom">
            <div class="color-box">
                <div class="title"><h2>Rent your own recording studio</h2></div>
            </div>
        </div>
    </div>
</div>



<div class="row mt-5 main-content">

    <div class="stepOne">
        <h1 class="mt-5 fw-bold">Step One: Select a Room</h1>

        <div class="justify-content-center">
            <select class="dropdown" @bind="SelectedRoomId" style="max-width: 300px;">
                @foreach (var rm in Rooms)
                {
                    <option value="@rm.Id" @onclick="() => UpdateRoom(rm.Id)" style="font-family:'Arial Rounded MT'">@rm.RoomName</option>
                }
            </select>
        </div>

        <div style="padding-top:10px; padding-left:25px;">
            <h5 class="fw-bold">Room Description</h5>
            @if (SelectedRoom is not null)
            {
                <ul style="padding-left:100px;">
                    <li><p><strong>RoomName:</strong> @SelectedRoom.RoomName</p></li>
                    <li><p><strong>Room Type:</strong> @SelectedRoom.RoomTypeName</p></li>
                    <li><p><strong>Max Capacity:</strong> @SelectedRoom.MaxCapacity</p></li>
                </ul>
            }

        </div>

    </div>
    <h1 class="mt-5 fw-bold">Step Two: Select a Date</h1><hr>
    <div class="justify-content-center">
        <input type="date" @onchange="(d) => UpdateDate(DateOnly.Parse(d.Value.ToString()))" style="max-width: 300px;" />
        @if (DateError is not null)
        {
            <p class="alert alert-danger">@DateError</p>
        }
    </div>

    <ul class="list-unstyled">
        @if (SelectedRoom is not null && DisplayTimes == true)
        {
            <h1 class="mt-5 fw-bold">Step Three: Select Time</h1><hr />
            @foreach (var timeframe in SelectedRoom.TimeFrames)
            {
                @if (timeframe.isAvailable)
                {
                    <button class="m-5 col-md-2" @onclick="() => UpdateSelectedTimeBlock(timeframe)" style="border: dashed; border-radius:5px;">
                    <li>@timeframe.startTime.ToString("MM/dd/yyyy hh:mm tt") to @timeframe.endTime.ToString("hh:mm tt")</li></button>
                }
            }
        }
    </ul>
    <hr />
    @if (SelectedTimeBlock is not null && SelectedRoom is not null && Date is not null)
    {
        <h5>@SelectedRoom.RoomName for @Date from @SelectedTimeBlock.startTime.ToString("hh:mm tt") to @SelectedTimeBlock.endTime.ToString("hh:mm tt")</h5>
        <center><button class="btn btn-primary m-5 red-button" style="max-width: 300px; border: none;" @onclick="() => SaveRental()"><strong>Confirm your selection</strong></button></center>
        @if (StrError.Length > 0)
        {
            <div class="alert alert-danger">@StrError</div>
        }
        @if (SuccessMessage.Length > 0)
        {
            <div class="alert alert-success">@SuccessMessage</div>
        }
    }
</div>

@code {
    //Chosen rental date
    public DateOnly? Date { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    private IEnumerable<RoomDto> Rooms = new List<RoomDto>();

    public TimeOnly StartTime { get; set; }

    public TimeOnly EndTime { get; set; }

    public RoomDto SelectedRoom { get; set; }

    public int SelectedRoomId { get; set; } = 1;

    public TimeAvailability? SelectedTimeBlock { get; set; }

    private bool DisplayTimes { get; set; } = false;

    public String DateError { get; set; }

    public string StrError = "";

    public string SuccessMessage = "";


    protected override async Task OnInitializedAsync()
    {

        Rooms = await httpClient.GetFromJsonAsync<IEnumerable<RoomDto>>($"{config[Constants.ApiEndpoint]}/room/{Date?.Month}/{Date?.Day}/{Date?.Year}");

        SelectedRoom = Rooms.Where(r => r.Id == SelectedRoomId).FirstOrDefault();
    }

    private async Task MakeRoomRental()
    {
        var userName = (await auth.GetAuthenticationStateAsync()).User.Identity.Name;
    }

    private void GetAvailableRoomsOnDate(DateTime date)
    {

    }

    private void UpdateRoom(int id)
    {
        SelectedRoomId = id;
        SelectedRoom = Rooms.Where(r => r.Id == SelectedRoomId).FirstOrDefault();
    }

    private async Task UpdateDate(DateOnly date)
    {
        SelectedTimeBlock = null;
        if (date < DateOnly.FromDateTime(DateTime.Now))
        {
            DateError = "Can't make a rental in the past";
            DisplayTimes = false;
            return;
        }
        DateError = null;
        DisplayTimes = true;
        Date = date;
        Rooms = await httpClient.GetFromJsonAsync<IEnumerable<RoomDto>>($"{config[Constants.ApiEndpoint]}/room/{Date?.Month}/{Date?.Day}/{Date?.Year}");
        SelectedRoom = Rooms.Where(r => r.Id == SelectedRoomId).FirstOrDefault();
    }

    private async Task UpdateSelectedTimeBlock(TimeAvailability timeblock)
    {
        SelectedTimeBlock = timeblock;
    }

    private async Task SaveRental()
    {
        StrError = "";
        SuccessMessage = "";
        var authstate = await auth.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;
        if (name is null)
        {
            return;
        }
        var request = new AddRoomRentalRequest(name, SelectedRoomId, SelectedRoom.RoomPrice, SelectedTimeBlock.startTime, SelectedTimeBlock.endTime);
        var response = await httpClient.PostAsJsonAsync($"{config[Constants.ApiEndpoint]}/RoomRental/{request}", request);
        if (!response.IsSuccessStatusCode)
        {
            StrError = "Something went wrong with your request. Please ensure you have selected a room, a date, and a time.";
        }
        else
        {
            SuccessMessage = "Successfully created rental";
        }
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }
}

