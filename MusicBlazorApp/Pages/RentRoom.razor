@page "/rent-a-room"
@using MusicApi.Data;
@using MusicBlazorApp.Data;
@inject IConfiguration config;
@inject HttpClient httpClient;
@inject AuthenticationStateProvider auth;

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');
</style>

<h1>Rent A Room</h1>

<div div class="main-content">
    <img class="img-fluid img" src="https://dummyimage.com/600x400/000/fff" />
    <div>
        <h1 class="p-5">Rent your own recording studio</h1>
    </div>
</div>

<div class="row mt-5 main-content">

    <h3 class="mt-5">Step One: Select a Room</h3>
    <label for="cars">Choose a room:</label>
   @*  <select name="cars" id="cars" @bind-value="SelectedRoom">
        @foreach (var room in Rooms)
        {
            <option value="@room">@room.RoomName</option>
        }
    </select> *@
    @if (SelectedRoom is not null)
    {
        <p>@SelectedRoom.RoomName</p>
    }

    <h3 class="mt-5">Step Two: Select a Date</h3>
    <input type="date" @bind-value="Date" />

    <h3 class="mt-5">Step Three: Select Time</h3>
    <label for="starttime">Start Time</label>
    <input type="time" @bind-value="StartTime" id="starttime" />
    <label for="endtime">End Time</label>
    <input type="time" @bind-value="EndTime" id="endtime" />
    <ul>
        @foreach (var room in Rooms)
        {
           <h1>@room.RoomName</h1>
            @foreach (var timeframe in room.TimeFrames)
            {
                @if (timeframe.isAvailable)
                {
                    <li>@timeframe.startTime to @timeframe.endTime</li>
                }
                else
                {
                    <li style="text-decoration: overline; color: gray;">@timeframe.startTime to @timeframe.endTime</li>

                }
            }
        }
    </ul>
</div>

@code {
    //Chosen rental date
    public DateOnly? Date { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    private IEnumerable<RoomDto> Rooms = new List<RoomDto>();

    public TimeOnly StartTime { get; set; }

    public TimeOnly EndTime { get; set; }

    public Room SelectedRoom { get; set; }



    protected override async Task OnInitializedAsync()
    {
        Rooms = await httpClient.GetFromJsonAsync<IEnumerable<RoomDto>>($"{config[Constants.ApiEndpoint]}/room/{Date?.Month}/{Date?.Day}/{Date?.Year}");
    }

    private async Task MakeRoomRental()
    {
        var userName = (await auth.GetAuthenticationStateAsync()).User.Identity.Name;

    }

    private void GetAvailableRoomsOnDate(DateTime date)
    {

    }
}

