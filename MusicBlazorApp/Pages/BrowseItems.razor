@page "/browse-instruments"

@using MusicApi.Data;
@using System.Net.Http;
@using System.Net.Http.Json;
@using MusicApi.Dtos;


@inject HttpClient httpClient;
@inject NavigationManager NavManager;
@inject IConfiguration config;

@if(Items.Count() != 0)
{
    <div class="row">
        <div class="col-lg-2 col-md-3">
            <div class="sticky-top" style="top: 75px;">
                <!-- Filter Section -->
                <nav id="filter-sidebar" class="collapse d-lg-block sidebar collapse bg-white">
                    <div class=" mx-3">
                        <h4>Filter</h4>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="flexCheckDefault">
                            <label class="form-check-label" for="flexCheckDefault">
                                Purchase New
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="used" id="flexCheckDefault" @bind="FilterUsed">
                            <label class="form-check-label" for="flexCheckDefault">
                                Purchase Used
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="rent" id="flexCheckDefault" @bind="FilterRent">
                            <label class="form-check-label" for="flexCheckDefault">
                                Rent
                            </label>
                        </div>
                        <hr />
                        <h4>Category</h4>
                        <div class="form-check">
                            @foreach (var category in CategoryStrings)
                            {
                                <div>
                                    <input class="form-check-input" type="checkbox" id="flexCheckDefault" @onclick="() => FilterItemsByCategory(category)">
                                    <label class="form-check-label" for="flexCheckDefault">
                                        @category
                                    </label>
                                </div>
                            }
                        </div>
                        <hr />
                        <h4>Price</h4>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value="@FilterLt50" @bind-value:after="FilterItems">
                            <label class="form-check-label" for="flexCheckDefault">
                                &lt; $50.00
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value="@Filter50to100" @bind-value:after="FilterItems">
                            <label class="form-check-label" for="flexCheckDefault">
                                $50.00 - $100.00
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value="@Filter100Plus" @bind-value:after="FilterItems">
                            <label class="form-check-label" for="flexCheckDefault">
                                $100.00 +
                            </label>
                        </div>
                    </div>
                </nav>
            </div>
        </div>
        <div class=" col-lg-10 col-md-9">
            <!-- SEARCH BAR AND TITLE -->
            <h1>Browse Instruments</h1>
            <div class="my-5 mx-3 d-flex justify-content-end">
                <InputText @bind-Value="SearchQuery"></InputText>
                <button @onclick="SearchItems" type="submit">Search</button>
            </div>

            <div class="p-4 d-flex flex-wrap flex-row" style="background-color: #EEEEEE; margin-right: 100px;">
                <!-- ITEMS -->
                @if (Items is not null)
                {
                    @foreach (var item in Items)
                    {
                        <div class="card m-4" style="width: 18rem; border: none; border-radius: 0px;" @onclick="() => HandleClick(item.Id)">
                            <div style="height:297px;">
                                @if (item.PrimaryImagePath != "css\\images\\itemImages")
                                {
                                    @if (item.Quantity == 0)
                                    {
                                        <img class="card-img-top" src="@item.PrimaryImagePath" alt="@item.ItemName" style="border-radius: 0px; filter: saturate(0);">
                                        <p style="background-color: darkred; color: white; position:absolute; top: 30px; padding: 10px; left: -5px;">Out of Stock</p>
                                    }
                                    else
                                    {
                                        <img class="card-img-top" src="@item.PrimaryImagePath" alt="@item.ItemName" style="border-radius: 0px;">
                                    }
                                }
                                else
                                {
                                    <img class="card-img-top" src="https://dummyimage.com/400x500/595959/fff&text=no_image" alt="@item.ItemName" style="border-radius: 0px;">
                                }
                            </div>
                            <div class="card-title"><h5 class="m-2">@item.ItemName</h5></div>
                            <div class="card-body">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    @if (item.AverageItemRating >= i)
                                    {
                                        <i class="fa fa-star rating-color"></i>
                                    }
                                    else
                                    {
                                        <i class="fa fa-star"></i>
                                    }
                                }
                            </div>
                            <div class="card-body">
                                <p class="card-text"><strong>$@item.SellPrice</strong></p>

                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    public string? SearchQuery { get; set; }

    public IEnumerable<ItemDto>? Items { get; set; }

    public IEnumerable<ItemDto>? AllItemsNoFilter { get; set; }

    public bool FilterNew { get; set; } = true;

    public bool FilterUsed { get; set; }

    public bool FilterRent { get; set; }

    [Parameter]
    public bool FilterLt50 { get; set; }

    [Parameter]
    public bool Filter50to100 { get; set; }

    public bool Filter100Plus { get; set; }

    public List<string> CategoryStrings = new();

    public List<(string, bool)> SelectedCategories = new List<(string, bool)>();



    protected override async Task OnInitializedAsync()
    {
        Items = new List<ItemDto>();
        Items = await httpClient.GetFromJsonAsync<List<ItemDto>>($"{config[Constants.ApiEndpoint]}/Items");

        AllItemsNoFilter = Items;

        foreach (var item in Items)
        {
            item.PrimaryImagePath = Path.Combine("css", "images", "itemImages", $"{item.PrimaryImagePath}");
        }
        CompileCategories();

    }

    public void HandleClick(int id)
    {
        NavManager.NavigateTo($"/View-Item/{id}");
    }

    public async Task FilterItems()
    {
        Items = await httpClient.GetFromJsonAsync<List<ItemDto>>($"{config[Constants.ApiEndpoint]}/Items");
        foreach (var item in Items)
        {
            item.PrimaryImagePath = Path.Combine("css", "images", "itemImages", $"{item.PrimaryImagePath}");
        }

        if (FilterLt50)
        {
            Items = Items.Where(i => i.SellPrice <= 50).ToList();
        }
        if (Filter50to100)
        {
            Items = Items.Where(i => (i.SellPrice >= 50 && i.SellPrice < 100)).ToList();
        }
        if(Filter100Plus)
        {
            Items = Items.Where(i => i.SellPrice > 100).ToList();
        }
        // if (CategoryStrings.Count > 0)
        // {
        //     foreach (var str in CategoryStrings)
        //     {
        //         Items = Items.Where(i => i.ItemCategories.Contains(str));
        //     }
        // }

    }

    public async Task FilterItemsByCategory(string categoryName)
    {
        UpdateSelectedCategories(categoryName);

        Items = AllItemsNoFilter;

        foreach (var cat in SelectedCategories)
        {
            Items = Items.Where(i => i.ItemCategories.Contains(cat.Item1));
        }
        if (SelectedCategories.Count == 0)
        {
            Items = AllItemsNoFilter;
        }

    }

    public async Task SearchItems()
    {
        Items = Items.Where(i => i.ItemName.ToLower().Contains(SearchQuery));
    }

    public async Task CompileCategories()
    {
        foreach (var item in Items)
        {
            if (item.ItemCategories.Count > 0)
            {
                foreach (var cat in item.ItemCategories)
                {
                    if (!CategoryStrings.Contains(cat))
                    {
                        CategoryStrings.Add(cat);
                    }
                }
            }
        }
    }

    public void UpdateSelectedCategories(string selectedCategory)
    {
        // foreach (var tup in SelectedCategories)
        // {
        //     // if the category names match, and the item is already selected, remove :)
        //     if (tup.Item1 == selectedCategory && tup.Item2 == true)
        //     {
        //         SelectedCategories.RemoveAll(item => item.Item1 == selectedCategory);
        //     }
        //     else if (tup.Item1 == selectedCategory && tup.Item2 == false)
        //     {
        //         SelectedCategories.RemoveAll(item => item.Item1 == selectedCategory);
        //     }
        // }

        if (!SelectedCategories.Any(m => m.Item1 == selectedCategory))
        {
            SelectedCategories.Add((selectedCategory, true));
        }
        else
        {
            SelectedCategories.RemoveAll(item => item.Item1 == selectedCategory);
        }

    }

}
