@page "/cart"
@using MusicApi.Data;
@using MusicBlazorApp.State;
@using MusicApi.Dtos;
@inject HttpClient httpClient;
@inject IConfiguration config;
@inject CartState cartState;
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider auth;

<h1>Your Cart</h1>

@if (cartState.SelectedItems is not null)
{
    @if (cartState.SelectedItems.Count == 0)
    {
        <div class="main-container" style="height: 90vh;">
            <p>You have no items in your cart</p>
            <div class="red-button"><h5><a href="/browse-instruments">Browse Items</a></h5></div>
        </div>
    }
    else
    {
        <div class="main-container">
            <div class="row">
                <div class="col-md-9">
                    <div class="row">
                        @foreach (var itemResult in cartState.SelectedItems)
                        {
                            <div class="row">
                                <div class="col-xl-4">
                                    <img width="300" class="img-fluid img" src="@Path.Combine("css", "images", "itemImages", $"{itemResult.Item.PrimaryImagePath}")">
                                </div>
                                <div class="col-xl-8">
                                    <div class="justify-content-center">
                                        <h3><strong>@itemResult.Item.ItemName</strong></h3>
                                        <p>Condition: @itemResult.StatusName</p>
                                    </div>
                                    <table class="table table-borderless">
                                        <thead>
                                            <tr>
                                                <th scope="col">each</th>
                                                <th scope="col">qty</th>
                                                <th scope="col">total</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>@itemResult.Item.SellPrice</td>
                                                <td><input type="number" min="0" @bind="@itemResult.Quantity" @onclick="CalculateCartTotal" /></td>
                                                <td>$@(itemResult.Item.Quantity * itemResult.Item.SellPrice)</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    <p @onclick="() => HandleDelete(itemResult.Item.Id, itemResult.StatusName)" style="color: cadetblue; text-decoration: underline;" class="delete-btn">Delete</p>
                                </div>
                            </div>
                            <hr />
                        }
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="total-area p-3 position-fixed px-5">
                        <h2>Cart Total</h2>
                        <h4>$@CartTotal</h4>
                        <p>Estimated Tax: </p>
                        <h5 class="red-button p-1 pt-3 m-3">Checkout</h5>
                    </div>
                    
                </div>

            </div>
        </div>
    }
}

@code {
    public decimal? CartTotal = 0;
    public string UserEmail { get; set; }
    public int CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await auth.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        if (name is null)
        {
            name = "";
        }
        //TODO: CHANGE THIS TO BE THE USERS EMAIL
        await cartState.RefreshCart(name);
        UserEmail = name;

        var dbCustomer = await httpClient.GetFromJsonAsync<Customer>($"{config[Constants.ApiEndpoint]}/customer/{name}");
        CustomerId = dbCustomer.Id;

        CalculateCartTotal();
    }

    public async Task HandleDelete(int itemId, string status)
    {
        var response = await httpClient.DeleteAsync($"{config[Constants.ApiEndpoint]}/cart/{CustomerId}/{itemId}/{status}");
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    public void CalculateCartTotal()
    {
        foreach (var itemResult in cartState.SelectedItems)
        {
            int? qty = itemResult.Item.Quantity;
            decimal? sprice = itemResult.Item.SellPrice;
            CartTotal += (qty * sprice);
        }
    }
}

