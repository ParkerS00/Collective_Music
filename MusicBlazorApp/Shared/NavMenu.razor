@using MusicApi.Data;
@using MusicBlazorApp.State;
@inject CartState cartState;
@inject HttpClient httpClient;
@inject AuthenticationStateProvider auth;
@inject IConfiguration config;

<div class="nav_home">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#"><img class="logo" src="css/images/logo.png" style="height:66.5px; width:250px;" /></a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-end" id="navbarNavAltMarkup">
                <div class="navbar-nav">
                    <a class="nav-link" href="/browse-instruments">Purchase or Rent Equipment</a>
                    <a class="nav-link" href="/rent-a-room">Rent a Recording Studio</a>
                    <a class="nav-link" href="/cart">Proceed to Purchase</a>
                    <AuthorizeView>
                        <Authorized>
                            <a class="user nav-link" href="Identity/Account/Manage">Hello, @context.User.Identity?.Name!</a>
                            <form method="post" action="Identity/Account/Logout">
                                <button type="submit" class="nav-link btn btn-link">Log out</button>
                            </form>
                        </Authorized>
                        <NotAuthorized>
                            <a class="nav-link" href="Identity/Account/Login">Login</a>
                            <a class="nav-link" href="Identity/Account/Register">Register</a>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </nav>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (cartState.SelectedItems is null)
        {
            var authstate = await auth.GetAuthenticationStateAsync();
            var user = authstate.User;
            var name = user.Identity?.Name;

            if (name is null)
            {
                cartState.SelectedItems = new List<MusicApi.Dtos.CartItemDto>();
                return;
            }

            var customer = await httpClient.GetFromJsonAsync<Customer?>($"{config[Constants.ApiEndpoint]}/customer/{name}");

            if (customer is not null)
            {
                cartState.SelectedItems = await httpClient.GetFromJsonAsync<List<MusicApi.Dtos.CartItemDto>>($"{config[Constants.ApiEndpoint]}/cart/{name}");
                //var response = await httpClient.PostAsJsonAsync($"{config[Constants.ApiEndpoint]}/customer/{request}", request);
            }
        }
    }
}
