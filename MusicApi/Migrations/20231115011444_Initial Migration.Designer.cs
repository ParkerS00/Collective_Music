// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicApi.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicApi.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20231115011444_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandDescription")
                        .HasColumnType("text")
                        .HasColumnName("brand_description");

                    b.Property<string>("BrandName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("brand_name");

                    b.HasKey("Id")
                        .HasName("brand_pkey");

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("RewardPoints")
                        .HasColumnType("integer")
                        .HasColumnName("reward_points");

                    b.HasKey("Id")
                        .HasName("customer_pkey");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("employee_pkey");

                    b.HasIndex("ManagerId");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("item_name");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("money")
                        .HasColumnName("sell_price");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("serial_number");

                    b.Property<decimal?>("SuggestedRentalPrice")
                        .HasColumnType("money")
                        .HasColumnName("suggested_rental_price");

                    b.HasKey("Id")
                        .HasName("item_pkey");

                    b.HasIndex("BrandId");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("item_category_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("item_category", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filepath")
                        .HasColumnType("text")
                        .HasColumnName("filepath");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("item_image_pkey");

                    b.HasIndex("ItemId");

                    b.ToTable("item_image", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("FinalRentalPrice")
                        .HasColumnType("money")
                        .HasColumnName("final_rental_price");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<string>("OutCondition")
                        .HasColumnType("text")
                        .HasColumnName("out_condition");

                    b.Property<int?>("RentalId")
                        .HasColumnType("integer")
                        .HasColumnName("rental_id");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("return_date");

                    b.HasKey("Id")
                        .HasName("item_rental_pkey");

                    b.HasIndex("ItemId");

                    b.HasIndex("RentalId");

                    b.ToTable("item_rental", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsRentable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rentable");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("item_status_pkey");

                    b.HasIndex("ItemId");

                    b.HasIndex("StatusId");

                    b.ToTable("item_status", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.HasKey("Id")
                        .HasName("purchase_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("purchase", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.PurchaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("money")
                        .HasColumnName("final_price");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("purchase_item_pkey");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("purchase_item", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly?>("RentalDate")
                        .HasColumnType("date")
                        .HasColumnName("rental_date");

                    b.HasKey("Id")
                        .HasName("rental_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("rental", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateOnly?>("ReviewDate")
                        .HasColumnType("date")
                        .HasColumnName("review_date");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text")
                        .HasColumnName("review_text");

                    b.HasKey("Id")
                        .HasName("review_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("max_capacity");

                    b.Property<string>("RoomName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("room_name");

                    b.Property<int?>("RoomTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("room_type_id");

                    b.HasKey("Id")
                        .HasName("room_pkey");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.RoomRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualPrice")
                        .HasColumnType("money")
                        .HasColumnName("actual_price");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("RentalId")
                        .HasColumnType("integer")
                        .HasColumnName("rental_id");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("room_rental_pkey");

                    b.HasIndex("RentalId");

                    b.HasIndex("RoomId");

                    b.ToTable("room_rental", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BasePrice")
                        .HasColumnType("money")
                        .HasColumnName("base_price");

                    b.Property<string>("RoomTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("room_type_name");

                    b.HasKey("Id")
                        .HasName("room_type_pkey");

                    b.ToTable("room_type", (string)null);
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status_name");

                    b.HasKey("Id")
                        .HasName("status_pkey");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Employee", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Employee", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("employee_manager_id_fkey");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Item", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Brand", "Brand")
                        .WithMany("Items")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("item_brand_id_fkey");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemCategory", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Category", "Category")
                        .WithMany("ItemCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("item_category_category_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Item", "Item")
                        .WithMany("ItemCategories")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("item_category_item_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemImage", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Item", "Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("item_image_item_id_fkey");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemRental", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Item", "Item")
                        .WithMany("ItemRentals")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("item_rental_item_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Rental", "Rental")
                        .WithMany("ItemRentals")
                        .HasForeignKey("RentalId")
                        .HasConstraintName("item_rental_rental_id_fkey");

                    b.Navigation("Item");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.ItemStatus", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Item", "Item")
                        .WithMany("ItemStatuses")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("item_status_item_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Status", "Status")
                        .WithMany("ItemStatuses")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("item_status_status_id_fkey");

                    b.Navigation("Item");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Purchase", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("purchase_customer_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Employee", "Employee")
                        .WithMany("Purchases")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("purchase_employee_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.PurchaseItem", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Item", "Item")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("purchase_item_item_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("purchase_item_purchase_id_fkey");

                    b.Navigation("Item");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Rental", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("rental_customer_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Employee", "Employee")
                        .WithMany("Rentals")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("rental_employee_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Review", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("review_customer_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("review_item_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Room", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("room_room_type_id_fkey");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.RoomRental", b =>
                {
                    b.HasOne("MusicBlazorApp.Data.Rental", "Rental")
                        .WithMany("RoomRentals")
                        .HasForeignKey("RentalId")
                        .HasConstraintName("room_rental_rental_id_fkey");

                    b.HasOne("MusicBlazorApp.Data.Room", "Room")
                        .WithMany("RoomRentals")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("room_rental_room_id_fkey");

                    b.Navigation("Rental");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Brand", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Category", b =>
                {
                    b.Navigation("ItemCategories");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Customer", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Employee", b =>
                {
                    b.Navigation("InverseManager");

                    b.Navigation("Purchases");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Item", b =>
                {
                    b.Navigation("ItemCategories");

                    b.Navigation("ItemImages");

                    b.Navigation("ItemRentals");

                    b.Navigation("ItemStatuses");

                    b.Navigation("PurchaseItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Purchase", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Rental", b =>
                {
                    b.Navigation("ItemRentals");

                    b.Navigation("RoomRentals");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Room", b =>
                {
                    b.Navigation("RoomRentals");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MusicBlazorApp.Data.Status", b =>
                {
                    b.Navigation("ItemStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
